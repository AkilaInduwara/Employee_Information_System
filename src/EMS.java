
import java.awt.Image;
import java.sql.*;
import java.time.LocalDate;
import java.time.format.DateTimeParseException;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class EMS extends javax.swing.JFrame {

    /**
     * Creates new form EMS
     */
    public EMS() {
        initComponents();
        Connect();
        tableupdate();
        
    }

    Connection con;
    PreparedStatement pst;

    public void Connect() {

        try {
            Class.forName("com.mysql.cj.jdbc.Driver"); //Register to the mysql Driver
            con = DriverManager.getConnection("jdbc:mysql://localhost/employee_information_system", "root", "");

        } catch (ClassNotFoundException ex) {
            Logger.getLogger(EMS.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(EMS.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    //view updated data in the database on the app interface. 
    private void tableupdate() {
        try {
            // Register MySQL driver to ensure that the DriverManager can find it
            Class.forName("com.mysql.cj.jdbc.Driver");

            // Establish connection to the MySQL database with provided credentials
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost/employee_information_system", "root", "");

            // Prepare SQL statement to select all records from the 'records' table
            PreparedStatement pst = con.prepareStatement("SELECT * FROM emprecords");

            // Execute the SQL query and get the result set containing the records
            ResultSet rs = pst.executeQuery();

            // Get the table model for jTable1 to modify its contents
            DefaultTableModel dft = (DefaultTableModel) recordTable.getModel();

            // Clear existing rows in the table to refresh it with new data
            dft.setRowCount(0);

            // Get the metadata of the result set to obtain information about its structure
            ResultSetMetaData rsmd = rs.getMetaData();

            // Get the number of columns in the result set
            int columnCount = rsmd.getColumnCount();

            // Loop through each row in the result set
            while (rs.next()) {
                // Create a vector to hold the values of each column for the current row
                Vector<Object> rowData = new Vector<>();
                // Loop through each column in the current row
                for (int i = 1; i <= columnCount; i++) {
                    // Get the value of the current column and add it to the vector

                    rowData.add(rs.getObject(i));
                }
                // Add the vector (representing a row) to the table model to display the row in the table
                dft.addRow(rowData);
            }

            // Close resources to release them and prevent resource leaks
            rs.close();
            pst.close();
            con.close();
        } catch (ClassNotFoundException | SQLException e) {
            e.printStackTrace(); // Handle errors properly, printing stack trace for now
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtLname = new javax.swing.JTextField();
        txtFname = new javax.swing.JTextField();
        txtDob = new javax.swing.JTextField();
        txtCity = new javax.swing.JTextField();
        txtSalary = new javax.swing.JTextField();
        txtPhone = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        recordTable = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(204, 204, 255));
        jPanel1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(102, 204, 255), new java.awt.Color(51, 51, 255), new java.awt.Color(51, 51, 51), new java.awt.Color(153, 153, 153)));

        jLabel1.setFont(new java.awt.Font("SansSerif", 1, 36)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("EMPLOYEE INFORMATION SYSTEM");
        jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        jLabel3.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        jLabel3.setText("First Name");

        jLabel4.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        jLabel4.setText("City");

        jLabel5.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        jLabel5.setText("Last Name");

        jLabel6.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        jLabel6.setText("Date Of Birth");

        jLabel2.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        jLabel2.setText("Salary");

        jLabel7.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        jLabel7.setText("Phone");

        txtLname.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
        txtLname.setAlignmentX(1.0F);
        txtLname.setAlignmentY(1.0F);
        txtLname.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(102, 102, 255), 2, true));

        txtFname.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
        txtFname.setAlignmentX(1.0F);
        txtFname.setAlignmentY(1.0F);
        txtFname.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(102, 102, 255), 2, true));
        txtFname.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFnameActionPerformed(evt);
            }
        });

        txtDob.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
        txtDob.setAlignmentX(1.0F);
        txtDob.setAlignmentY(1.0F);
        txtDob.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(102, 102, 255), 2, true));

        txtCity.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
        txtCity.setAlignmentX(1.0F);
        txtCity.setAlignmentY(1.0F);
        txtCity.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(102, 102, 255), 2, true));

        txtSalary.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
        txtSalary.setAlignmentX(1.0F);
        txtSalary.setAlignmentY(1.0F);
        txtSalary.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(102, 102, 255), 2, true));

        txtPhone.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
        txtPhone.setAlignmentX(1.0F);
        txtPhone.setAlignmentY(1.0F);
        txtPhone.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(102, 102, 255), 2, true));

        recordTable.setBackground(new java.awt.Color(255, 255, 204));
        recordTable.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 255), 1, true));
        recordTable.setFont(new java.awt.Font("SansSerif", 2, 14)); // NOI18N
        recordTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "First Name", "Last Name", "Date Of Birth", "City", "Salary", "Phone"
            }
        ));
        recordTable.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        recordTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                recordTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(recordTable);

        jButton1.setBackground(new java.awt.Color(153, 255, 153));
        jButton1.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        jButton1.setForeground(new java.awt.Color(0, 51, 51));
        jButton1.setText("Save");
        jButton1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, null, null, new java.awt.Color(0, 153, 51), new java.awt.Color(0, 255, 51)));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(255, 204, 102));
        jButton2.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        jButton2.setText("Edit");
        jButton2.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, null, null, new java.awt.Color(153, 102, 0), new java.awt.Color(255, 153, 0)));
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton2MouseClicked(evt);
            }
        });
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setBackground(new java.awt.Color(255, 102, 102));
        jButton3.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        jButton3.setText("Delete");
        jButton3.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, null, null, new java.awt.Color(153, 0, 0), new java.awt.Color(255, 0, 51)));
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(227, 227, 227)
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(222, 222, 222))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(txtFname, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel2)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(txtSalary, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel6)
                                    .addGap(18, 18, 18)
                                    .addComponent(txtDob, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(82, 82, 82)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(txtLname, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel7))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtPhone, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtCity, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addGap(49, 49, 49)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(41, 41, 41))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabel1)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(67, 67, 67)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(jLabel5)
                            .addComponent(txtFname, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtLname, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(17, 17, 17)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(jLabel6)
                            .addComponent(txtDob, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtCity, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel7)
                            .addComponent(txtSalary, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtPhone, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(38, 38, 38)
                        .addComponent(jScrollPane1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(280, 280, 280)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(70, 70, 70)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(76, 76, 76))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        setSize(new java.awt.Dimension(1087, 816));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:

        try {

            //When Click on the data in the table, all the data in the each row will uploaded in to the editing section.
            DefaultTableModel model = (DefaultTableModel) recordTable.getModel();
            int selectedIndex = recordTable.getSelectedRow();

            // Check if a row is selected
            if (selectedIndex != -1) {
                // Retrieve the ID of the selected row
                int id = Integer.parseInt(model.getValueAt(selectedIndex, 0).toString());

                // Retrieve input values from text fields
                String fname = txtFname.getText();
                String lname = txtLname.getText();
                String dobString = txtDob.getText();// Get the date of birth string from the text field
                String city = txtCity.getText();
                String salary = txtSalary.getText();
                String phone = txtPhone.getText();

                // Check if any of the required fields are empty
                if (fname.isEmpty() || lname.isEmpty() || city.isEmpty() || phone.isEmpty() || salary.isEmpty() || dobString.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Please fill in all fields to continue.");
                    return;
                }

                // Attempt to parse the date of birth string
                LocalDate dob;
                try {
                    dob = LocalDate.parse(dobString);
                } catch (DateTimeParseException e) {

                    // Display error message if parsing fails
                    JOptionPane.showMessageDialog(this, "Please enter the date of birth in the format YYYY-MM-DD.");
                    return;
                }

                // Prepare SQL insert statement
                pst = con.prepareStatement("UPDATE emprecords SET fname=?, lname=?, dob=?, city=?,  salary=?, phone=? WHERE id=?");

                // Set parameters for the prepared statement
                pst.setString(1, fname);
                pst.setString(2, lname);
                pst.setDate(3, java.sql.Date.valueOf(dob));
                pst.setString(4, city);
                pst.setString(5, salary);
                pst.setString(6, phone);
                pst.setInt(7, id);

                // Execute the insert statement
                int rowsAffected = pst.executeUpdate();

                // Check if any rows were affected by the insert operation
                if (rowsAffected > 0) {
                    JOptionPane.showMessageDialog(this, "Record Updated.");// Display success message
                    tableupdate();

                    // Clear all text fields after adding data to the database
                    txtFname.setText("");
                    txtLname.setText("");
                    txtDob.setText("");
                    txtCity.setText("");
                    txtSalary.setText("");
                    txtPhone.setText("");

                    txtFname.requestFocus();// Set focus on the first text field after clearing

                } else {
                    JOptionPane.showMessageDialog(this, "Failed to update record.");// Display message if no rows were inserted
                }
            } else {

                JOptionPane.showMessageDialog(this, "Please select a record to update.");// Display message if no row is selected
            }
        } catch (SQLException ex) {
            Logger.getLogger(EMS.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:

        try {
            DefaultTableModel model = (DefaultTableModel) recordTable.getModel();
            int selectedIndex = recordTable.getSelectedRow();

            // Check if a row is selected
            if (selectedIndex != -1) {
                // Retrieve the ID of the selected row
                int id = Integer.parseInt(model.getValueAt(selectedIndex, 0).toString());

                // Confirm deletion with the user
                int option = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete this record?", "Confirmation", JOptionPane.YES_NO_OPTION);

                // If the user confirms deletion
                if (option == JOptionPane.YES_OPTION) {
                    // Prepare SQL delete statement
                    pst = con.prepareStatement("DELETE FROM emprecords WHERE id=?");

                    // Set parameter for the prepared statement
                    pst.setInt(1, id);

                    // Execute the delete statement
                    int rowsAffected = pst.executeUpdate();

                    // Check if any rows were affected by the delete operation
                    if (rowsAffected > 0) {
                        JOptionPane.showMessageDialog(this, "Record Deleted."); // Display success message
                        tableupdate();

                        // Clear all text fields after adding data to the database
                        txtFname.setText("");
                        txtLname.setText("");
                        txtDob.setText("");
                        txtCity.setText("");
                        txtSalary.setText("");
                        txtPhone.setText("");

                        txtFname.requestFocus();// Set focus on the first text field after clearing

                    } else {
                        JOptionPane.showMessageDialog(this, "Failed to delete record."); // Display message if no rows were deleted
                    }
                }
            } else {
                JOptionPane.showMessageDialog(this, "Please select a record to delete."); // Display message if no row is selected
            }
        } catch (SQLException ex) {
            Logger.getLogger(EMS.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_jButton3ActionPerformed

    private void txtFnameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFnameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFnameActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:

        try {
            // Retrieve input values from text fields
            String fname = txtFname.getText();
            String lname = txtLname.getText();

            // Get the date of birth string from the text field
            String dobString = txtDob.getText();

            String city = txtCity.getText();
            String salary = txtSalary.getText();
            String phone = txtPhone.getText();

            // Check if any of the required fields are empty
            if (fname.isEmpty() || lname.isEmpty() || city.isEmpty() || phone.isEmpty() || salary.isEmpty() || dobString.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Please fill in all fields to continue.");
                return;
            }

            // Attempt to parse the date of birth string
            LocalDate dob;
            try {
                dob = LocalDate.parse(dobString);
            } catch (DateTimeParseException e) {

                // Display error message if parsing fails
                JOptionPane.showMessageDialog(this, "Please enter the date of birth in the format YYYY-MM-DD.");
                return;
            }

            // Prepare SQL insert statement
            pst = con.prepareStatement("INSERT INTO emprecords (fname, lname, dob, city,  salary, phone) VALUES (?, ?, ?, ?, ?, ?)");

            // Set parameters for the prepared statement
            pst.setString(1, fname);
            pst.setString(2, lname);
            pst.setDate(3, java.sql.Date.valueOf(dob));
            pst.setString(4, city);
            pst.setString(5, salary);
            pst.setString(6, phone);

            // Execute the insert statement
            int rowsAffected = pst.executeUpdate();

            // Check if any rows were affected by the insert operation
            if (rowsAffected > 0) {
                JOptionPane.showMessageDialog(this, "Record Saved");// Display success message
                tableupdate();

                // Clear all text fields after adding data to the database
                txtFname.setText("");
                txtLname.setText("");
                txtDob.setText("");
                txtCity.setText("");
                txtSalary.setText("");
                txtPhone.setText("");

                txtFname.requestFocus();// Set focus on the first text field after clearing

            } else {
                JOptionPane.showMessageDialog(this, "Failed to save record.");// Display message if no rows were inserted

            }
        } catch (SQLException ex) {
            Logger.getLogger(EMS.class
                    .getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseClicked
        // TODO add your handling code here:


    }//GEN-LAST:event_jButton2MouseClicked

    private void recordTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_recordTableMouseClicked
        // TODO add your handling code here:

        //When Click on the data in the table, all the data in the each row will uploaded in to the editing section.
        DefaultTableModel model = (DefaultTableModel) recordTable.getModel();
        int selectedIndex = recordTable.getSelectedRow();

        // get values of id(o inddex)column and declare the id as a variable.because its a unique value.
        int id = Integer.parseInt(model.getValueAt(selectedIndex, 0).toString());

        //records data show in the table
        txtFname.setText(model.getValueAt(selectedIndex, 1).toString());
        txtLname.setText(model.getValueAt(selectedIndex, 2).toString());
        txtDob.setText(model.getValueAt(selectedIndex, 3).toString());
        txtCity.setText(model.getValueAt(selectedIndex, 4).toString());
        txtSalary.setText(model.getValueAt(selectedIndex, 5).toString());
        txtPhone.setText(model.getValueAt(selectedIndex, 6).toString());


    }//GEN-LAST:event_recordTableMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("metal".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EMS.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EMS.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EMS.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EMS.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EMS().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable recordTable;
    private javax.swing.JTextField txtCity;
    private javax.swing.JTextField txtDob;
    private javax.swing.JTextField txtFname;
    private javax.swing.JTextField txtLname;
    private javax.swing.JTextField txtPhone;
    private javax.swing.JTextField txtSalary;
    // End of variables declaration//GEN-END:variables
}
